version: '3.8'

volumes:
  redis_data:
  storage_data:

services:
  base: &base
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    env_file: .env
    volumes:
      - storage_data:/app/storage

  rails:
    <<: *base
    depends_on:
      redis:
        condition: service_healthy  # Ensure Redis is ready
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - DATABASE_URL=postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}?prepared_statements=false&options=-csearch_path%3Dpublic
    entrypoint: docker/entrypoints/rails.sh
    command: ['sh', '-c', 'bin/rails db:create; bin/rails db:migrate && bundle exec rails s -p 3000 -b 0.0.0.0']
    restart: always

  sidekiq:
    <<: *base
    depends_on:
      - redis
      - rails
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - DATABASE_URL=postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}?prepared_statements=false&options=-csearch_path%3Dpublic
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    restart: always

  redis:
    image: redis:7.0-alpine
    env_file: .env
    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\" --save '' --appendonly no"]
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always