version: '3.8'

volumes:
  postgres_data:
  redis_data:
  storage_data:
  # Optional: If backup.sql is large and you want to mount it
  # backup_volume: # You'd need to define how this gets populated

services:
  base: &base
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    env_file: .env
    volumes:
      - storage_data:/app/storage
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres123 # Ensure this matches postgres service
      - POSTGRES_DATABASE=chatwoot
      - REDIS_PASSWORD=postgres

  rails:
    <<: *base
    depends_on:
      postgres: # Rails now depends directly on postgres
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - SKIP_DB_SETUP=true # Keep this so Rails doesn't try to migrate
    entrypoint: docker/entrypoints/rails.sh
    command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']
    restart: always

  sidekiq:
    <<: *base
    depends_on:
      rails: 
        condition: service_started 
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - SKIP_DB_SETUP=true # Keep this for sidekiq too
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    restart: always

  postgres:
    image: pgvector/pgvector:pg16
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chatwoot # Initial DB, will be dropped/recreated by db_restore
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123 # MUST match PGPASSWORD in db_restore
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatwoot || pg_isready -U postgres -d postgres"] # Check chatwoot OR default postgres db
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine # Consider using redis:7.0-alpine to match your supabase setup if issues arise
    restart: always
    command: ["sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\""]
    env_file: .env # Ensure REDIS_PASSWORD is in .env
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5